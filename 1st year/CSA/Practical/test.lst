     1                                  ; Sa se citeasca de la tastatura mai multe numere intregi pana la citirea valorii 0. Sa se
     2                                  ; scrie intr-un fisier, separate de spatii, doar acele numere negative care au numar impar de
     3                                  ; biti (cu valoarea 1).
     4                                  
     5                                  bits 32
     6                                  
     7                                  global start
     8                                  
     9                                  extern exit, fopen, scanf, fprintf, fclose
    10                                  import exit msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  import fclose msvcrt.dll
    15                                  
    16                                  segment data use32 class=data
    17 00000000 <res 00000190>              numbers resd 100
    18 00000190 00000000                    num dd 0
    19 00000194 00                          len db 0
    20 00000195 256400                      read_format db "%d", 0 
    21                                  
    22 00000198 746573745F72657375-         file_name db "test_results.txt", 0
    22 000001A1 6C74732E74787400   
    23 000001A9 7700                        access_mode db "w", 0
    24 000001AB 25642000                    print_format db "%d ", 0
    25 000001AF FFFFFFFF                    descriptor dd -1
    26                                      
    27                                  segment code use32 class=code
    28                                  start:
    29 00000000 68[A9010000]                push access_mode
    30 00000005 68[98010000]                push file_name
    31 0000000A FF15[00000000]              call [fopen]
    32 00000010 83C408                      add esp, 4 * 2
    33                                  
    34 00000013 83F800                      cmp eax, 0
    35 00000016 7470                        je .return
    36                                  
    37 00000018 A3[AF010000]                mov [descriptor], eax
    38                                  
    39 0000001D BF[00000000]                mov edi, numbers
    40                                  
    41                                  .read:
    42 00000022 68[90010000]                push num
    43 00000027 68[95010000]                push read_format
    44 0000002C FF15[00000000]              call [scanf]
    45 00000032 83C408                      add esp, 4 * 2
    46                                  
    47 00000035 A1[90010000]                mov eax, [num]
    48 0000003A 83F800                      cmp eax, 0
    49 0000003D 7409                        jz .end_read
    50                                  
    51 0000003F AB                          stosd
    52 00000040 FE05[94010000]              inc byte [len] 
    53 00000046 EBDA                        jmp .read
    54                                  
    55                                  .end_read:
    56 00000048 BE[00000000]                mov esi, numbers
    57 0000004D 8A1D[94010000]              mov bl, [len]
    58                                  
    59                                  .filter:
    60 00000053 80FB00                      cmp bl, 0
    61 00000056 7421                        je .end_filter
    62                                  
    63 00000058 AD                          lodsd
    64 00000059 FECB                        dec bl
    65 0000005B 83F800                      cmp eax, 0
    66 0000005E 7DF3                        jge .filter
    67 00000060 7AF1                        jp .filter
    68                                  
    69 00000062 50                          push dword eax
    70 00000063 68[AB010000]                push dword print_format
    71 00000068 FF35[AF010000]              push dword [descriptor]
    72 0000006E FF15[00000000]              call [fprintf]
    73 00000074 83C40C                      add esp, 4 * 3
    74                                  
    75 00000077 EBDA                        jmp .filter
    76                                  
    77                                  .end_filter:
    78 00000079 FF35[AF010000]              push dword [descriptor]
    79 0000007F FF15[00000000]              call [fclose]
    80 00000085 83C404                      add esp, 4
    81                                  
    82                                  .return:
    83 00000088 6A00                        push dword 0
    84 0000008A FF15[00000000]              call [exit]
